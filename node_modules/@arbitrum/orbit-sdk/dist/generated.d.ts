/**
 * [__View Contract on Arbitrum Sepolia Blockscout__](https://sepolia-explorer.arbitrum.io/address/0x0000000000000000000000000000000000000070)
 */
export declare const arbOwnerABI: readonly [{
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "method";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
        readonly indexed: true;
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "OwnerActs";
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "addChainOwner";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getAllChainOwners";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getInfraFeeAccount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getNetworkFeeAccount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "addr";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isChainOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "maxWeiToRelease";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "releaseL1PricerSurplusFunds";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ownerToRemove";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "removeChainOwner";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newVersion";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "timestamp";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly name: "scheduleArbOSUpgrade";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "cap";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly name: "setAmortizedCostCapBips";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newInfraFeeAccount";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setInfraFeeAccount";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "inertia";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly name: "setL1BaseFeeEstimateInertia";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "pricePerUnit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setL1PricePerUnit";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "equilibrationUnits";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setL1PricingEquilibrationUnits";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "inertia";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly name: "setL1PricingInertia";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "weiPerUnit";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly name: "setL1PricingRewardRate";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setL1PricingRewardRecipient";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "priceInWei";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setL2BaseFee";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "sec";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly name: "setL2GasBacklogTolerance";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "sec";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly name: "setL2GasPricingInertia";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "limit";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly name: "setMaxTxGasLimit";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "priceInWei";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setMinimumL2BaseFee";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newNetworkFeeAccount";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setNetworkFeeAccount";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "cost";
        readonly internalType: "int64";
        readonly type: "int64";
    }];
    readonly name: "setPerBatchGasCharge";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "limit";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly name: "setSpeedLimit";
    readonly outputs: readonly [];
}];
/**
 * [__View Contract on Arbitrum Sepolia Blockscout__](https://sepolia-explorer.arbitrum.io/address/0x0000000000000000000000000000000000000070)
 */
export declare const arbOwnerAddress: {
    readonly 421614: "0x0000000000000000000000000000000000000070";
};
/**
 * [__View Contract on Arbitrum Sepolia Blockscout__](https://sepolia-explorer.arbitrum.io/address/0x0000000000000000000000000000000000000070)
 */
export declare const arbOwnerConfig: {
    readonly address: {
        readonly 421614: "0x0000000000000000000000000000000000000070";
    };
    readonly abi: readonly [{
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "method";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
            readonly indexed: true;
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "OwnerActs";
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "addChainOwner";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getAllChainOwners";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getInfraFeeAccount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getNetworkFeeAccount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "addr";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isChainOwner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "maxWeiToRelease";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "releaseL1PricerSurplusFunds";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ownerToRemove";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "removeChainOwner";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newVersion";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "timestamp";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly name: "scheduleArbOSUpgrade";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "cap";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly name: "setAmortizedCostCapBips";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newInfraFeeAccount";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setInfraFeeAccount";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "inertia";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly name: "setL1BaseFeeEstimateInertia";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "pricePerUnit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setL1PricePerUnit";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "equilibrationUnits";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setL1PricingEquilibrationUnits";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "inertia";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly name: "setL1PricingInertia";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "weiPerUnit";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly name: "setL1PricingRewardRate";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setL1PricingRewardRecipient";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "priceInWei";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setL2BaseFee";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "sec";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly name: "setL2GasBacklogTolerance";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "sec";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly name: "setL2GasPricingInertia";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "limit";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly name: "setMaxTxGasLimit";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "priceInWei";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setMinimumL2BaseFee";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newNetworkFeeAccount";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setNetworkFeeAccount";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "cost";
            readonly internalType: "int64";
            readonly type: "int64";
        }];
        readonly name: "setPerBatchGasCharge";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "limit";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly name: "setSpeedLimit";
        readonly outputs: readonly [];
    }];
};
/**
 * [__View Contract on Arbitrum Sepolia Blockscout__](https://sepolia-explorer.arbitrum.io/address/0x000000000000000000000000000000000000006b)
 */
export declare const arbOwnerPublicABI: readonly [{
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getAllChainOwners";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getInfraFeeAccount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getNetworkFeeAccount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "addr";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isChainOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}];
/**
 * [__View Contract on Arbitrum Sepolia Blockscout__](https://sepolia-explorer.arbitrum.io/address/0x000000000000000000000000000000000000006b)
 */
export declare const arbOwnerPublicAddress: {
    readonly 421614: "0x000000000000000000000000000000000000006b";
};
/**
 * [__View Contract on Arbitrum Sepolia Blockscout__](https://sepolia-explorer.arbitrum.io/address/0x000000000000000000000000000000000000006b)
 */
export declare const arbOwnerPublicConfig: {
    readonly address: {
        readonly 421614: "0x000000000000000000000000000000000000006b";
    };
    readonly abi: readonly [{
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getAllChainOwners";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getInfraFeeAccount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getNetworkFeeAccount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "addr";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isChainOwner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
};
export declare const erc20ABI: readonly [{
    readonly type: "event";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "spender";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Approval";
}, {
    readonly type: "event";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Transfer";
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "decimals";
    readonly outputs: readonly [{
        readonly type: "uint8";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly name: "addedValue";
        readonly type: "uint256";
    }];
    readonly name: "increaseAllowance";
    readonly outputs: readonly [{
        readonly type: "bool";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly name: "subtractedValue";
        readonly type: "uint256";
    }];
    readonly name: "decreaseAllowance";
    readonly outputs: readonly [{
        readonly type: "bool";
    }];
}];
/**
 * -
 * - [__View Contract on Arbitrum Sepolia Blockscout__](https://sepolia-explorer.arbitrum.io/address/0x06E341073b2749e0Bb9912461351f716DeCDa9b0)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xfbd0b034e6305788007f6e0123cc5eae701a5751)
 */
export declare const rollupCreatorABI: readonly [{
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
    readonly inputs: readonly [];
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "rollupAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "nativeToken";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "inboxAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "outbox";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "rollupEventInbox";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "challengeManager";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "adminProxy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "sequencerInbox";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "bridge";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "upgradeExecutor";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "validatorUtils";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "validatorWalletCreator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "RollupCreated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "TemplatesUpdated";
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "bridgeCreator";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract BridgeCreator";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "challengeManagerTemplate";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IChallengeManager";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "payable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "deployParams";
        readonly internalType: "struct RollupCreator.RollupDeploymentParams";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "config";
            readonly internalType: "struct Config";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "confirmPeriodBlocks";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "extraChallengeTimeBlocks";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "stakeToken";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "baseStake";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "wasmModuleRoot";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "loserStakeEscrow";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "chainId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "chainConfig";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "genesisBlockNum";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "sequencerInboxMaxTimeVariation";
                readonly internalType: "struct ISequencerInbox.MaxTimeVariation";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "delayBlocks";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "futureBlocks";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "delaySeconds";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "futureSeconds";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }];
        }, {
            readonly name: "batchPoster";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "validators";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "maxDataSize";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nativeToken";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deployFactoriesToL2";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "maxFeePerGasForRetryables";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly name: "createRollup";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "l2FactoriesDeployer";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract DeployHelper";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "osp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IOneStepProofEntry";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "rollupAdminLogic";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRollupAdmin";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "rollupUserLogic";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRollupUser";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_bridgeCreator";
        readonly internalType: "contract BridgeCreator";
        readonly type: "address";
    }, {
        readonly name: "_osp";
        readonly internalType: "contract IOneStepProofEntry";
        readonly type: "address";
    }, {
        readonly name: "_challengeManagerLogic";
        readonly internalType: "contract IChallengeManager";
        readonly type: "address";
    }, {
        readonly name: "_rollupAdminLogic";
        readonly internalType: "contract IRollupAdmin";
        readonly type: "address";
    }, {
        readonly name: "_rollupUserLogic";
        readonly internalType: "contract IRollupUser";
        readonly type: "address";
    }, {
        readonly name: "_upgradeExecutorLogic";
        readonly internalType: "contract IUpgradeExecutor";
        readonly type: "address";
    }, {
        readonly name: "_validatorUtils";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_validatorWalletCreator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_l2FactoriesDeployer";
        readonly internalType: "contract DeployHelper";
        readonly type: "address";
    }];
    readonly name: "setTemplates";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "upgradeExecutorLogic";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IUpgradeExecutor";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "validatorUtils";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "validatorWalletCreator";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "payable";
    readonly type: "receive";
}];
/**
 * -
 * - [__View Contract on Arbitrum Sepolia Blockscout__](https://sepolia-explorer.arbitrum.io/address/0x06E341073b2749e0Bb9912461351f716DeCDa9b0)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xfbd0b034e6305788007f6e0123cc5eae701a5751)
 */
export declare const rollupCreatorAddress: {
    readonly 1337: "0x596eAbE0291D4cdAfAC7ef53D16C92Bf6922b5e0";
    readonly 412346: "0x3BaF9f08bAD68869eEdEa90F2Cc546Bd80F1A651";
    readonly 421614: "0x06E341073b2749e0Bb9912461351f716DeCDa9b0";
    readonly 11155111: "0xfBD0B034e6305788007f6e0123cc5EaE701a5751";
};
/**
 * -
 * - [__View Contract on Arbitrum Sepolia Blockscout__](https://sepolia-explorer.arbitrum.io/address/0x06E341073b2749e0Bb9912461351f716DeCDa9b0)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xfbd0b034e6305788007f6e0123cc5eae701a5751)
 */
export declare const rollupCreatorConfig: {
    readonly address: {
        readonly 1337: "0x596eAbE0291D4cdAfAC7ef53D16C92Bf6922b5e0";
        readonly 412346: "0x3BaF9f08bAD68869eEdEa90F2Cc546Bd80F1A651";
        readonly 421614: "0x06E341073b2749e0Bb9912461351f716DeCDa9b0";
        readonly 11155111: "0xfBD0B034e6305788007f6e0123cc5EaE701a5751";
    };
    readonly abi: readonly [{
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
        readonly inputs: readonly [];
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "rollupAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "nativeToken";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "inboxAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "outbox";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "rollupEventInbox";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "challengeManager";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "adminProxy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "sequencerInbox";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "bridge";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "upgradeExecutor";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "validatorUtils";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "validatorWalletCreator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "RollupCreated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "TemplatesUpdated";
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "bridgeCreator";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract BridgeCreator";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "challengeManagerTemplate";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IChallengeManager";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "payable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "deployParams";
            readonly internalType: "struct RollupCreator.RollupDeploymentParams";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "config";
                readonly internalType: "struct Config";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "confirmPeriodBlocks";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "extraChallengeTimeBlocks";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "stakeToken";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "baseStake";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "wasmModuleRoot";
                    readonly internalType: "bytes32";
                    readonly type: "bytes32";
                }, {
                    readonly name: "owner";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "loserStakeEscrow";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "chainId";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "chainConfig";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "genesisBlockNum";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "sequencerInboxMaxTimeVariation";
                    readonly internalType: "struct ISequencerInbox.MaxTimeVariation";
                    readonly type: "tuple";
                    readonly components: readonly [{
                        readonly name: "delayBlocks";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "futureBlocks";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "delaySeconds";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }, {
                        readonly name: "futureSeconds";
                        readonly internalType: "uint256";
                        readonly type: "uint256";
                    }];
                }];
            }, {
                readonly name: "batchPoster";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "validators";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }, {
                readonly name: "maxDataSize";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nativeToken";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deployFactoriesToL2";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "maxFeePerGasForRetryables";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly name: "createRollup";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "l2FactoriesDeployer";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract DeployHelper";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "osp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IOneStepProofEntry";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "rollupAdminLogic";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IRollupAdmin";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "rollupUserLogic";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IRollupUser";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_bridgeCreator";
            readonly internalType: "contract BridgeCreator";
            readonly type: "address";
        }, {
            readonly name: "_osp";
            readonly internalType: "contract IOneStepProofEntry";
            readonly type: "address";
        }, {
            readonly name: "_challengeManagerLogic";
            readonly internalType: "contract IChallengeManager";
            readonly type: "address";
        }, {
            readonly name: "_rollupAdminLogic";
            readonly internalType: "contract IRollupAdmin";
            readonly type: "address";
        }, {
            readonly name: "_rollupUserLogic";
            readonly internalType: "contract IRollupUser";
            readonly type: "address";
        }, {
            readonly name: "_upgradeExecutorLogic";
            readonly internalType: "contract IUpgradeExecutor";
            readonly type: "address";
        }, {
            readonly name: "_validatorUtils";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_validatorWalletCreator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_l2FactoriesDeployer";
            readonly internalType: "contract DeployHelper";
            readonly type: "address";
        }];
        readonly name: "setTemplates";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "nonpayable";
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "upgradeExecutorLogic";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IUpgradeExecutor";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "validatorUtils";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "view";
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "validatorWalletCreator";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
};
/**
 * -
 * - [__View Contract on Arbitrum Sepolia Blockscout__](https://sepolia-explorer.arbitrum.io/address/0xb462C69f8f638d2954c9618B03765FC1770190cF)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7612718D3143C791B2Ff5c01a9a7D02CEf00AE9c)
 */
export declare const tokenBridgeCreatorABI: readonly [{
    readonly stateMutability: "payable";
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_logic";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "admin_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "newAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AdminChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "beacon";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "BeaconUpgraded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly stateMutability: "payable";
    readonly type: "fallback";
}, {
    readonly stateMutability: "payable";
    readonly type: "receive";
}];
/**
 * -
 * - [__View Contract on Arbitrum Sepolia Blockscout__](https://sepolia-explorer.arbitrum.io/address/0xb462C69f8f638d2954c9618B03765FC1770190cF)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7612718D3143C791B2Ff5c01a9a7D02CEf00AE9c)
 */
export declare const tokenBridgeCreatorAddress: {
    readonly 1337: "0x4A2bA922052bA54e29c5417bC979Daaf7D5Fe4f4";
    readonly 412346: "0x38F35Af53bF913c439eaB06A367e09D6eb253492";
    readonly 421614: "0xb462C69f8f638d2954c9618B03765FC1770190cF";
    readonly 11155111: "0x7612718D3143C791B2Ff5c01a9a7D02CEf00AE9c";
};
/**
 * -
 * - [__View Contract on Arbitrum Sepolia Blockscout__](https://sepolia-explorer.arbitrum.io/address/0xb462C69f8f638d2954c9618B03765FC1770190cF)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7612718D3143C791B2Ff5c01a9a7D02CEf00AE9c)
 */
export declare const tokenBridgeCreatorConfig: {
    readonly address: {
        readonly 1337: "0x4A2bA922052bA54e29c5417bC979Daaf7D5Fe4f4";
        readonly 412346: "0x38F35Af53bF913c439eaB06A367e09D6eb253492";
        readonly 421614: "0xb462C69f8f638d2954c9618B03765FC1770190cF";
        readonly 11155111: "0x7612718D3143C791B2Ff5c01a9a7D02CEf00AE9c";
    };
    readonly abi: readonly [{
        readonly stateMutability: "payable";
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_logic";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "admin_";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousAdmin";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "newAdmin";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AdminChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "beacon";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "BeaconUpgraded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
};
