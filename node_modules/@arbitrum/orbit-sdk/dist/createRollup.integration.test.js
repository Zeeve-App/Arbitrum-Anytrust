"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const viem_1 = require("viem");
const chains_1 = require("./chains");
const utils_1 = require("./utils");
const prepareChainConfig_1 = require("./prepareChainConfig");
const createRollupPrepareConfig_1 = require("./createRollupPrepareConfig");
const createRollupPrepareTransaction_1 = require("./createRollupPrepareTransaction");
const createRollupPrepareTransactionRequest_1 = require("./createRollupPrepareTransactionRequest");
const createRollupPrepareTransactionReceipt_1 = require("./createRollupPrepareTransactionReceipt");
const testHelpers_1 = require("./testHelpers");
const deployer = (0, testHelpers_1.getTestPrivateKeyAccount)();
const batchPoster = deployer.address;
const validators = [deployer.address];
const publicClient = (0, viem_1.createPublicClient)({
    chain: chains_1.nitroTestnodeL2,
    transport: (0, viem_1.http)(),
});
(0, vitest_1.it)(`successfully deploys core contracts through rollup creator`, async () => {
    // generate a random chain id
    const chainId = (0, utils_1.generateChainId)();
    // create the chain config
    const chainConfig = (0, prepareChainConfig_1.prepareChainConfig)({
        chainId,
        arbitrum: { InitialChainOwner: deployer.address },
    });
    const config = (0, createRollupPrepareConfig_1.createRollupPrepareConfig)({
        chainId: BigInt(chainId),
        owner: deployer.address,
        chainConfig,
    });
    // prepare the transaction for deploying the core contracts
    const request = await (0, createRollupPrepareTransactionRequest_1.createRollupPrepareTransactionRequest)({
        params: {
            config,
            batchPoster,
            validators,
        },
        account: deployer.address,
        publicClient,
    });
    // sign and send the transaction
    const txHash = await publicClient.sendRawTransaction({
        serializedTransaction: await deployer.signTransaction(request),
    });
    // get the transaction
    const tx = (0, createRollupPrepareTransaction_1.createRollupPrepareTransaction)(await publicClient.getTransaction({ hash: txHash }));
    const [arg] = tx.getInputs();
    // assert all inputs are correct
    (0, vitest_1.expect)(arg.config).toEqual(config);
    (0, vitest_1.expect)(arg.batchPoster).toEqual(batchPoster);
    (0, vitest_1.expect)(arg.validators).toEqual(validators);
    (0, vitest_1.expect)(arg.maxDataSize).toEqual(104857n);
    (0, vitest_1.expect)(arg.nativeToken).toEqual(viem_1.zeroAddress);
    (0, vitest_1.expect)(arg.deployFactoriesToL2).toEqual(true);
    (0, vitest_1.expect)(arg.maxFeePerGasForRetryables).toEqual((0, viem_1.parseGwei)('0.1'));
    // get the transaction receipt after waiting for the transaction to complete
    const txReceipt = (0, createRollupPrepareTransactionReceipt_1.createRollupPrepareTransactionReceipt)(await publicClient.waitForTransactionReceipt({ hash: txHash }));
    (0, vitest_1.expect)(txReceipt.status).toEqual('success');
    (0, vitest_1.expect)(() => txReceipt.getCoreContracts()).not.toThrowError();
});
