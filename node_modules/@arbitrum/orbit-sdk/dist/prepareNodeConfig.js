"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareNodeConfig = void 0;
const ParentChain_1 = require("./types/ParentChain");
const chains_1 = require("./chains");
function sanitizePrivateKey(privateKey) {
    return privateKey.startsWith('0x') ? privateKey.slice(2) : privateKey;
}
function stringifyInfoJson(infoJson) {
    return JSON.stringify(infoJson);
}
function stringifyBackendsJson(backendsJson) {
    return JSON.stringify(backendsJson);
}
function parentChainIsArbitrum(parentChainId) {
    // doing switch here to make sure it's exhaustive when checking against `ParentChainId`
    switch (parentChainId) {
        case chains_1.sepolia.id:
        case chains_1.nitroTestnodeL1.id:
            return false;
        case chains_1.arbitrumSepolia.id:
        case chains_1.nitroTestnodeL2.id:
            return true;
    }
}
function prepareNodeConfig({ chainName, chainConfig, coreContracts, batchPosterPrivateKey, validatorPrivateKey, parentChainId, parentChainRpcUrl, }) {
    if (!(0, ParentChain_1.validParentChainId)(parentChainId)) {
        throw new Error(`[prepareNodeConfig] invalid parent chain id: ${parentChainId}`);
    }
    const config = {
        'chain': {
            'info-json': stringifyInfoJson([
                {
                    'chain-id': chainConfig.chainId,
                    'parent-chain-id': parentChainId,
                    'parent-chain-is-arbitrum': parentChainIsArbitrum(parentChainId),
                    'chain-name': chainName,
                    'chain-config': chainConfig,
                    'rollup': {
                        'bridge': coreContracts.bridge,
                        'inbox': coreContracts.inbox,
                        'sequencer-inbox': coreContracts.sequencerInbox,
                        'rollup': coreContracts.rollup,
                        'validator-utils': coreContracts.validatorUtils,
                        'validator-wallet-creator': coreContracts.validatorWalletCreator,
                        'deployed-at': coreContracts.deployedAtBlockNumber,
                    },
                },
            ]),
            'name': chainName,
        },
        'parent-chain': {
            connection: {
                url: parentChainRpcUrl,
            },
        },
        'http': {
            addr: '0.0.0.0',
            port: 8449,
            vhosts: '*',
            corsdomain: '*',
            api: ['eth', 'net', 'web3', 'arb', 'debug'],
        },
        'node': {
            'forwarding-target': '',
            'sequencer': {
                'max-tx-data-size': 85000,
                'enable': true,
                'dangerous': {
                    'no-coordinator': true,
                },
                'max-block-speed': '250ms',
            },
            'delayed-sequencer': {
                enable: true,
            },
            'batch-poster': {
                'max-size': 90000,
                'enable': true,
                'parent-chain-wallet': {
                    'private-key': sanitizePrivateKey(batchPosterPrivateKey),
                },
            },
            'staker': {
                'enable': true,
                'strategy': 'MakeNodes',
                'parent-chain-wallet': {
                    'private-key': sanitizePrivateKey(validatorPrivateKey),
                },
            },
            'caching': {
                archive: true,
            },
        },
    };
    if (chainConfig.arbitrum.DataAvailabilityCommittee) {
        config.node['data-availability'] = {
            'enable': true,
            'sequencer-inbox-address': coreContracts.sequencerInbox,
            'parent-chain-node-url': parentChainRpcUrl,
            'rest-aggregator': {
                enable: true,
                urls: 'http://localhost:9876',
            },
            'rpc-aggregator': {
                'enable': true,
                'assumed-honest': 1,
                'backends': stringifyBackendsJson([
                    {
                        url: 'http://localhost:9876',
                        pubkey: 'YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==',
                        signermask: 1,
                    },
                ]),
            },
        };
    }
    return config;
}
exports.prepareNodeConfig = prepareNodeConfig;
