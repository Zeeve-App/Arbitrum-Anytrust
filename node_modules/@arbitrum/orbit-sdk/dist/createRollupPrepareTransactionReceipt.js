"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRollupPrepareTransactionReceipt = void 0;
const viem_1 = require("viem");
const contracts_1 = require("./contracts");
function findRollupCreatedEventLog(txReceipt) {
    const abiItem = (0, viem_1.getAbiItem)({ abi: contracts_1.rollupCreator.abi, name: 'RollupCreated' });
    const eventSelector = (0, viem_1.getEventSelector)(abiItem);
    const log = txReceipt.logs.find((log) => log.topics[0] === eventSelector);
    if (typeof log === 'undefined') {
        throw new Error(`No "RollupCreated" logs found in logs for transaction: ${txReceipt.transactionHash}`);
    }
    return log;
}
function decodeRollupCreatedEventLog(log) {
    const decodedEventLog = (0, viem_1.decodeEventLog)({ ...log, abi: contracts_1.rollupCreator.abi });
    if (decodedEventLog.eventName !== 'RollupCreated') {
        throw new Error(`Expected "RollupCreated" event but found: ${decodedEventLog.eventName}`);
    }
    return decodedEventLog;
}
function createRollupPrepareTransactionReceipt(txReceipt) {
    return {
        ...txReceipt,
        getCoreContracts: function () {
            const eventLog = findRollupCreatedEventLog(txReceipt);
            const decodedEventLog = decodeRollupCreatedEventLog(eventLog);
            const { rollupAddress, inboxAddress, ...rest } = decodedEventLog.args;
            return {
                rollup: rollupAddress,
                inbox: inboxAddress,
                ...rest,
                deployedAtBlockNumber: Number(txReceipt.blockNumber),
            };
        },
    };
}
exports.createRollupPrepareTransactionReceipt = createRollupPrepareTransactionReceipt;
