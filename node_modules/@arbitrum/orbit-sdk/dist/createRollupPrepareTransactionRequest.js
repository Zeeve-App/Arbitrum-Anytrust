"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRollupPrepareTransactionRequest = void 0;
const viem_1 = require("viem");
const createRollupDefaults_1 = require("./createRollupDefaults");
const createRollupGetCallValue_1 = require("./createRollupGetCallValue");
const createRollupGetMaxDataSize_1 = require("./createRollupGetMaxDataSize");
const contracts_1 = require("./contracts");
const ParentChain_1 = require("./types/ParentChain");
const isCustomFeeTokenAddress_1 = require("./utils/isCustomFeeTokenAddress");
const isAnyTrustChainConfig_1 = require("./utils/isAnyTrustChainConfig");
function createRollupEncodeFunctionData(args) {
    return (0, viem_1.encodeFunctionData)({
        abi: contracts_1.rollupCreator.abi,
        functionName: 'createRollup',
        args,
    });
}
async function createRollupPrepareTransactionRequest({ params, account, publicClient, }) {
    const chainId = publicClient.chain?.id;
    if (!(0, ParentChain_1.validParentChainId)(chainId)) {
        throw new Error('chainId is undefined');
    }
    const chainConfig = JSON.parse(params.config.chainConfig);
    if ((0, isCustomFeeTokenAddress_1.isCustomFeeTokenAddress)(params.nativeToken) &&
        !(0, isAnyTrustChainConfig_1.isAnyTrustChainConfig)(chainConfig)) {
        throw new Error(`Custom fee token can only be used on AnyTrust chains. Set "arbitrum.DataAvailabilityCommittee" to "true" in the chain config.`);
    }
    const maxDataSize = (0, createRollupGetMaxDataSize_1.createRollupGetMaxDataSize)(chainId);
    const paramsWithDefaults = { ...createRollupDefaults_1.defaults, ...params, maxDataSize };
    const request = await publicClient.prepareTransactionRequest({
        chain: publicClient.chain,
        to: contracts_1.rollupCreator.address[chainId],
        data: createRollupEncodeFunctionData([paramsWithDefaults]),
        value: (0, createRollupGetCallValue_1.createRollupGetCallValue)(paramsWithDefaults),
        account,
    });
    return { ...request, chainId };
}
exports.createRollupPrepareTransactionRequest = createRollupPrepareTransactionRequest;
